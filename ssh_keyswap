#!/bin/sh

## TODO:
##  - choose auth_key to replace

export FZF_DEFAULT_OPTS="--height 30% --reverse"
name="${0##*/}"

die() {
	usage="\
Usage:
  $name [-n <file>] [-o <file>] [-t <host>]

Options:
  -n  new private key file
      defaults to creating one interactively
  -o  old private key file
      defaults to selecting one interactively from ~/.ssh/
  -t  host name or address
      defaults to interactively selecting one from ~/.ssh/config"

	printf "%s\n" "${1:-$usage}"
	exit 1
}

cd ~/.ssh || exit 1
while getopts n:o:t: opt; do
	case $opt in
		n) new_priv_key_file="$OPTARG"
		   new_pub_key_file="new_priv_key_file".pub
		   ;;
		o) priv_key_file="$OPTARG" ;;
		t) host="$OPTARG" ;;
		*) die ;;
	esac
done

if [ -z "$host" ] && grep -m1 "^Host" config > /dev/null; then
	host="$(awk '/^Host/ {print $2}' config | fzf --header='Choose hosts:')"
fi
[ "$host" ] || die "No host given; quitting ..."

auth_keys_old="$(mktemp -ut "$name".auth_keys_old.XXXXXX)"
auth_keys_new="$(mktemp -ut "$name".auth_keys_new.XXXXXX)"

trap 'rm "$auth_keys_new" "$auth_keys_old"' 0 1 2 3 15

for file in "$auth_keys_old" "$auth_keys_new"; do
	touch "$file" || exit 1
	chmod 600 "$file"
done

[ "$priv_key_file" ] || priv_key_file=$(fzf --header='Choose key to replace:' -e -q 'id_ !pub')
[ "$priv_key_file" ] || die "No key given; quitting ..."

pub_key_file="$priv_key_file".pub
[ -r "$pub_key_file" ] && pub_key="$(cat "$pub_key_file")"
[ "$pub_key" ] || die "No public key for $priv_key_file; quitting ..."

if [ ! -r "$new_pub_key_file" ]; then
	new_priv_key_file="$priv_key_file".new
	new_pub_key_file="$new_priv_key_file".pub
	ssh-keygen -t ed25519 -a 64 -f "$new_priv_key_file" || exit 1
fi

if ! scp "$host":~/.ssh/authorized_keys "$auth_keys_old" > /dev/null; then
	printf "%s\n" "Couldn't connect to $host; quitting ..."
	exit 1
fi

while read -r auth_key; do
	if [ "$pub_key" != "$auth_key" ]; then
		printf "%s\n" "$auth_key" >> "$auth_keys_new";
	fi
done < "$auth_keys_old"
cat "$new_pub_key_file" >> "$auth_keys_new"

if scp "$auth_keys_new" "$host":~/.ssh/authorized_keys > /dev/null; then
	mv -f "$new_priv_key_file" "$priv_key_file"
	mv -f "$new_pub_key_file" "$pub_key_file"

	[ -S "$SSH_AUTH_SOCK" ] && ssh-add "$priv_key_file"
else
	printf "%s\n" "Couldn't connect to $host; quitting ..."
	exit 1
fi
