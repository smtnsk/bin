#!/bin/sh

## TODO:
##  - choose auth_key to replace
##  - many keys at once + which key to which host
##  - rotate keys; keep n oldest keys; rename to ssh_keyrot
##    - add date to filename
##    - change IdentityFile in ~/.ssh/config
##      - or use a symlink: ~/.ssh/id_ed25519 -> ~/.ssh/<keyfile>
##  - handle creating and transferring the first ever key to a host
##    - try to connect without password, then ask for one and try again
##  - one key per host? symlinks to master if one key is used for many hosts
##  - -p, port number

export FZF_DEFAULT_OPTS="--height 30% --reverse -m"

name="${0##*/}"
usage="\
Usage:
  $name [-n <file>] [-o <file>] [-t <host>]

Options:
  -n  new private key file
      defaults to creating one interactively
  -o  old private key file
      defaults to selecting one interactively from ~/.ssh/
  -t  host name or address
      can be specified multiple times
      defaults to selecting interactively from ~/.ssh/config"

die()
{
	code=$1
	[ "$code" -eq 1 ] && exec 1>&2
	shift
	for arg; do
		printf "%s\n" "$arg"
	done
	exit $code
}

cd ~/.ssh || exit 1
while getopts hn:o:t: opt; do
	case $opt in
		n) new_priv_key_file="$OPTARG"
		   new_pub_key_file="new_priv_key_file".pub
		   ;;
		o) priv_key_file="$OPTARG" ;;
		t) hosts="$hosts $OPTARG" ;;
		*) die 0 "$usage" ;;
	esac
done

if [ -z "$hosts" ] && grep -m1 "^Host" config > /dev/null; then
	hosts="$(awk '/^Host/ {print $2}' config | fzf --header='Choose hosts:')"
fi
[ "$hosts" ] || die 1 "E: No hosts given; quitting ..."
set -- "$hosts"

auth_keys_old="$(mktemp -ut "$name".auth_keys_old.XXXXXX)"
auth_keys_new="$(mktemp -ut "$name".auth_keys_new.XXXXXX)"

trap 'rm "$auth_keys_new" "$auth_keys_old"' 0 1 2 3 15

for file in "$auth_keys_old" "$auth_keys_new"; do
	touch "$file" || exit 1
	chmod 600 "$file"
done

[ "$priv_key_file" ] || priv_key_file=$(fzf --header='Choose key to replace:' -e -q 'id_ !pub')
[ "$priv_key_file" ] || die 1 "E: No key given; quitting ..."

pub_key_file="$priv_key_file".pub
[ -r "$pub_key_file" ] && pub_key="$(cat "$pub_key_file")"
[ "$pub_key" ] || die 1 "E: No public key for $priv_key_file; quitting ..."


if [ ! -r "$new_pub_key_file" ]; then
	new_priv_key_file="$priv_key_file".new
	new_pub_key_file="$new_priv_key_file".pub
	key_id="$(id -un)@$(hostname)-$(date -u +'%Y-%m-%d')"
	ssh-keygen \
		-t ed25519 \
		-a 64 \
		-C "$key_id" \
        -f "$new_priv_key_file" || exit 1
fi

hosts_n=$#
transfers_n=0
for host; do
	if ! scp "$host":~/.ssh/authorized_keys "$auth_keys_old" > /dev/null; then
		printf "%s\n" "Couldn't transfer from $host; skipping ..."
		continue
	fi

	printf "" > "$auth_keys_new"
	while read -r auth_key; do
		if [ "$pub_key" != "$auth_key" ]; then
			printf "%s\n" "$auth_key" >> "$auth_keys_new";
		fi
	done < "$auth_keys_old"
	cat "$new_pub_key_file" >> "$auth_keys_new"

	if ! scp "$auth_keys_new" "$host":~/.ssh/authorized_keys > /dev/null; then
		printf "%s\n" "Couldn't transfer to $host; skipping ..."
		continue
	fi

	transfers_n=$(( transfers_n + 1 ))
done

if [ $transfers_n -eq $hosts_n ]; then
	mv -f "$new_priv_key_file" "$priv_key_file"
	mv -f "$new_pub_key_file" "$pub_key_file"
	# [ "$key_id" ] && <replace IdentityFile in ~/.ssh/config>
	[ -S "$SSH_AUTH_SOCK" ] && ssh-add "$priv_key_file"
fi
printf "%d/%d hosts updated\n" "$transfers_n" "$hosts_n"
